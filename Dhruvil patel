#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SONGS 100
#define MAX_TITLE_LENGTH 50
#define MAX_ARTIST_LENGTH 50

typedef struct 
{
    char title[MAX_TITLE_LENGTH];
    char artist[MAX_ARTIST_LENGTH];
} Song;

typedef struct 
{
    Song songs[MAX_SONGS];
    int count;
} 
Playlist;


void initializePlaylist(Playlist *playlist);
void addSong(Playlist *playlist, const char *title, const char *artist);
void removeSong(Playlist *playlist, int index);
void printPlaylist(const Playlist *playlist);

int main() 
{
    Playlist playlist;
    initializePlaylist(&playlist);

    addSong(&playlist, "Liggi", "Ritvix");
    addSong(&playlist, "Without Me", "Eminem");
    addSong(&playlist, "Still Rollin", "Shubh");

    printf("Initial Playlist:\n");
    printPlaylist(&playlist);

    removeSong(&playlist, 1); 

    printf("\nPlaylist after removing second song:\n");
    printPlaylist(&playlist);

    return 0;
}

void initializePlaylist(Playlist *playlist) 
{
    playlist->count = 0;
}

void addSong(Playlist *playlist, const char *title, const char *artist) 
{
    if (playlist->count < MAX_SONGS) {
        strcpy(playlist->songs[playlist->count].title, title);
        strcpy(playlist->songs[playlist->count].artist, artist);
        playlist->count++;
    } else {
        printf("Cannot add more songs. Playlist is full.\n");
    }
}

void removeSong(Playlist *playlist, int index) 
{
    if (index >= 0 && index < playlist->count) 
    {
        for (int i = index; i < playlist->count - 1; i++) {
            strcpy(playlist->songs[i].title, playlist->songs[i + 1].title);
            strcpy(playlist->songs[i].artist, playlist->songs[i + 1].artist);
        }
        playlist->count--;
    } else 
    {
        printf("Invalid song index.\n");
    }
}

void printPlaylist(const Playlist *playlist) 
{
    if (playlist->count == 0) 
    {
        printf("Playlist is empty.\n");
    } else 
    {
        for (int i = 0; i < playlist->count; i++) 
        {
            printf("%d. %s - %s\n", i + 1, playlist->songs[i].title, playlist->songs[i].artist);
        }
    }
}

